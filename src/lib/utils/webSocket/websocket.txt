// utils/websocket.ts
import { WebSocketServer, WebSocket } from 'ws';
import type { IncomingMessage } from 'http';

const onlineUsers = new Map<string, WebSocket>();
const wss = new WebSocketServer({ noServer: true });

wss.on('connection', (ws, request) => {
    const userId = new URL(request.url!, `http://${request.headers.host}`).searchParams.get('userId');
    
    if (userId) {
        onlineUsers.set(userId, ws);

        ws.on('close', () => {
            onlineUsers.delete(userId);
        });
    }
});

export function getOnlineUserSocket(userId: string) {
    return onlineUsers.get(userId);
}

export function handleWebSocketUpgrade(request: IncomingMessage, socket: any, head: Buffer) {
    wss.handleUpgrade(request, socket, head, (ws) => {
        wss.emit('connection', ws, request);
    });
}

export function getSocketID(idAccount:string,idTrip:string){
    return `${idAccount}+${idTrip}`
}